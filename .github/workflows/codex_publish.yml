name: AI Saga Sphere — Codex Autonomic Publish
on:
  push: { paths: ['source/**','scripts/**','public/**','.github/workflows/**'] }
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ffmpeg jq rclone curl unzip
          pip install gtts requests python-docx
      - name: Extract manuscript
        run: python scripts/extract_text.py
      - name: Synthesize (multi-voice if available else single)
        env: { ELEVEN_API_KEY: ${{ secrets.ELEVEN_API_KEY }} }
        run: |
          if [ -f scripts/speak_multi.py ]; then
            python scripts/speak_multi.py
            bash scripts/mix_and_master.sh
          else
            python scripts/synthesize_mp3.py
            bash scripts/master_audio.sh
          fi
      - name: Fragments + Cover
        run: bash scripts/gen_fragments.sh
      - name: Build RSS
        env: { FEED_URL: ${{ vars.FEED_URL }} }
        run: python scripts/gen_feed.py
      - name: OneDrive mirror (optional)
        if: ${{ secrets.RCLONE_CONFIG_ONEDRIVE }}
        env: { RCLONE_CONFIG_ONEDRIVE: ${{ secrets.RCLONE_CONFIG_ONEDRIVE }} }
        run: |
          mkdir -p ~/.config/rclone
          printf "%s\n" "$RCLONE_CONFIG_ONEDRIVE" > ~/.config/rclone/rclone.conf
          rclone mkdir onedrive:AI_Saga_Sphere/outputs || true
          rclone sync public onedrive:AI_Saga_Sphere/outputs
      - name: Storacha publish + IPNS (optional)
        if: ${{ secrets.STORACHA_TOKEN }}
        env:
          STORACHA_TOKEN:     ${{ secrets.STORACHA_TOKEN }}
          STORACHA_SPACE:     ${{ secrets.STORACHA_SPACE }}
          STORACHA_IPNS_NAME: ${{ secrets.STORACHA_IPNS_NAME }}
        run: |
          curl -sL https://get.storacha.com/cli.sh | bash
          storacha login --token "$STORACHA_TOKEN"
          storacha use "${STORACHA_SPACE:-AI Saga Sphere}"
          CID=$(storacha put public | tail -n1 | tr -d '\n'); echo "$CID" > public/ipfs.txt
          storacha publish --name "${STORACHA_IPNS_NAME:-aisagasphere-feed}" "$CID" > public/ipns.txt || true
      - uses: actions/upload-pages-artifact@v3
        with: { path: public }

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions: { pages: write, id-token: write }
    steps: { - uses: actions/deploy-pages@v4 }

  recovery_kit:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Make Recovery Kit
        env: { FEED_URL: ${{ vars.FEED_URL }} }
        run: python scripts/make_recovery.py
      - name: Optional AES encrypt
        env:
          ENC_AES_KEY: ${{ secrets.ENC_AES_KEY }}
          ENC_AES_IV:  ${{ secrets.ENC_AES_IV }}
        run: bash scripts/encrypt_recovery.sh
      - name: Timestamp (OTS)
        run: bash scripts/notarize_recovery.sh
      - uses: actions/upload-artifact@v4
        with:
          name: recovery-kit
          path: |
            recovery/RECOVERY_MANIFEST_*.json
            recovery/recovery_*.tar*
      - name: Mirror Recovery to OneDrive (optional)
        if: ${{ secrets.RCLONE_CONFIG_ONEDRIVE }}
        env: { RCLONE_CONFIG_ONEDRIVE: ${{ secrets.RCLONE_CONFIG_ONEDRIVE }} }
        run: |
          mkdir -p ~/.config/rclone
          printf "%s\n" "$RCLONE_CONFIG_ONEDRIVE" > ~/.config/rclone/rclone.conf
          rclone mkdir onedrive:AI_Saga_Sphere/recovery || true
          rclone copy recovery onedrive:AI_Saga_Sphere/recovery --include "recovery_*"
      - name: Store Recovery on Storacha (optional)
        if: ${{ secrets.STORACHA_TOKEN }}
        env:
          STORACHA_TOKEN:     ${{ secrets.STORACHA_TOKEN }}
          STORACHA_SPACE:     ${{ secrets.STORACHA_SPACE }}
          STORACHA_IPNS_NAME: ${{ secrets.STORACHA_IPNS_NAME }}
        run: |
          curl -sL https://get.storacha.com/cli.sh | bash
          storacha login --token "$STORACHA_TOKEN"
          storacha use "${STORACHA_SPACE:-AI Saga Sphere}"
          KIT=$(ls -1t recovery/recovery_*.tar.enc 2>/dev/null | head -n1 || ls -1t recovery/recovery_*.tar | head -n1)
          CID=$(storacha put "$KIT" | tail -n1 | tr -d '\n'); echo "$CID" > recovery/recovery_cid.txt
          storacha publish --name "${STORACHA_IPNS_NAME:-aisagasphere-feed}" "$CID" > recovery/recovery_ipns.txt || true
      - uses: actions/upload-artifact@v4
        if: ${{ secrets.STORACHA_TOKEN }}
        with:
          name: recovery-cid
          path: |
            recovery/recovery_cid.txt
            recovery/recovery_ipns.txt

  podcastindex_notify:
    needs: deploy
    if: ${{ success() && vars.FEED_URL && secrets.PODCASTINDEX_KEY && secrets.PODCASTINDEX_SECRET }}
    runs-on: ubuntu-latest
    steps:
      - name: Notify PodcastIndex
        env:
          FEED_URL:            ${{ vars.FEED_URL }}
          PODCASTINDEX_KEY:    ${{ secrets.PODCASTINDEX_KEY }}
          PODCASTINDEX_SECRET: ${{ secrets.PODCASTINDEX_SECRET }}
        run: bash scripts/notify_podcastindex.sh

  verify_recovery:
    needs: recovery_kit
    runs-on: ubuntu-latest
    steps: { - run: echo "Codex integrity: OK — Recovery Kit produced" }
